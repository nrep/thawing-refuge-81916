<html lang="en">
    <head>
        <!-- Standard Meta -->
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

        <!-- Site Properties -->
        <title>New Post - Sobanuka</title>
        <link rel="stylesheet" type="text/css" href="../libs/semantic-ui-css/semantic.css"/>
        <link rel="stylesheet" type="text/css" href="../styles/jquery.tagsinput.css" />
        <link rel="stylesheet" href="../libs/dropzone/min/dropzone.min.css">

        <script src="../scripts/jquery.min.js"></script>
        <script src="../libs/semantic-ui-css/semantic.min.js"></script>
        <script src="../scripts/vue.min.js"></script>
        <script src="../scripts/feathers.min.js"></script>
        <script src="../scripts/jquery.tagsinput.js"></script>
        <script src="../scripts/core.min.js"></script>
        <script src="../libs/dropzone/min/dropzone.min.js"></script>
        <script src="../scripts/socket.io/socket.io.js"></script>
        <style>
            #container {
                margin-top: 4rem;
            }
            #sidebar-menu {
                background: #0D47A1;
            }

            #search-box {
                padding-left: 1rem;
            }

            #nav,
            #footer {
                background-color: #0D47A1;
            }

            #nav {
                box-shadow: 0px 0px 4px 0px;
            }

            #input-title,
            #input-description,
            #input-body,
            #tags {
                margin-bottom: -1em;
                border-left-style: none;
                border-right-style: none;
                border-radius: 0px;
                font-family: -apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif;
            }

            #tags_tag {
                border-style: none;
                border-style: none;
                border-radius: 0px;
            }

            #form,
            #buttons {
                margin-bottom: 2rem;
            }

            span.tag {
                margin-left: 1rem;
                margin-top: 0.25rem;
            }

            div.dz-image {
                border-radius: 0px;
            }

            #input-pic-name {
                border-style: none;
                border-style: none;
                border-radius: 0px;
                display: none;
            }

            #save-pic-name-btn {
                display: none;
            }
        </style>
    </head>
    <body>
        <!-- Sidebar Menu -->
        <div class="ui vertical inverted sidebar menu" id="sidebar-menu">
            <a class="active item">Overview</a>
            <a class="item">Posts</a>
            <a class="item">Users</a>
            <a class="item">Comments</a>
            <a class="item">Notifications</a>
        </div>
        <div class="ui large secondary inverted pointing top fixed menu" id="secondary-menu">
            <span class="toc item">
                <a href="#">
                    <i id="sidebar-icon" class="sidebar icon"></i>
                </a>
                <span>Sobanuka</span>
            </span>
            <a class="right item">
                <i class="user icon"></i>
            </a>
        </div>
        <!--- Navigation bar -->
        <div class="ui inverted blue fixed menu" id="nav">
            <span class="toc item">
                <a href="#">
                    <i id="sidebar-icon" class="sidebar icon"></i>
                </a>
                <span>Sobanuka Editor</span>
            </span>
            <div class="right menu">
                <div class="item">
                    <div class="ui transparent inverted icon input" id="search-box">
                        <i id="main-search-icon" class="search icon"></i>
                    </div>
                </div>
                <a href="/login" class="item">
                    <i class="user icon"></i>
                </a>
            </div>
        </div>
        <div class="pusher">
            <div id="container">
                <% include ../partials/editor.ejs %>
            </div>
        </div>
        <script>
            // If no id is to be found in the storage
            // Tell the user to login first
            if (window.localStorage.getItem('sobanuka-account-id') === 'undefined') {
                document.getElementById('container').innerHTML = '<div class="ui middle aligned center aligned segment">Seems like you didn\'t login. Please <a href="/login">login</a> first.</div>';
            }

            // Attach events to the hamburger icon
            // Events to toggle the sidebar state
            $(document)
                .ready(function() {
                    $('.ui.sidebar')
                        .sidebar('attach events', '.toc.item')
                    ;
                })
            ;

            // Initialize socket
            const socket = io();
            // Initialize the client
            const client = feathers()
                .configure(feathers.hooks())
                .configure(feathers.socketio(socket));

            // Initiaize the upload service
            const uploadService = client.service('uploads');
            // Array to store ids of already uploaded files
            let uploadedFileIds = [];

            let titlePhoto = '';

            // Reference to DOM elements
            const saveBtn = document.getElementById('save-btn');
            const titleInput = document.getElementById('input-title');
            const bodyInput = document.getElementById('input-body');
            const tagsInput = document.getElementById('tags');

            // Colors to assign to tags before saving them as topics
            const colors = [
                'red', 
                'orange', 
                'yellow', 
                'olive', 
                'green', 
                'teal', 
                'blue', 
                'violet', 
                'purple', 
                'pink',
                'brown',
                'grey',
                'black'
            ];

            // Ids to be added to the tags before they are saved as topics
            const topicsIds = [
                'topic1',
                'topic2',
                'topic3',
                'topic4',
                'topic5',
                'topic6',
                'topic7'
            ];

            // When resource is succefully aploaded
            uploadService.on('created', function(file) {
                // Initailize a variable to store the id of the last uploaded resource
                let lastFileId = file.id;
                if (titlePhoto === '') {
                    titlePhoto = file.id;
                }
                // Add the id to the to uploaded file ids
                uploadedFileIds = [ ...uploadedFileIds, lastFileId];
                // Set the id as the name that shows up on hover over the uploaded resource
                document.querySelector('.dz-filename').firstElementChild.innerText = lastFileId;
                // Log the id
                console.log('Received filecreated event!', file.id);
            });
        
            // Initialize Dropzone
            Dropzone.options.myAwesomeDropzone = {
                paramName: "uri",
                uploadMultiple: false,
                acceptedFiles: 'image/*, video/*',
                addRemoveLinks: true,
                init: function() {
                    // When file added, 
                    this.on('addedfile', function(file) {
                        // Log it's name
                        console.log('Original file name: ', file.name);
                    });
                    // When file is being uploaded,
                    this.on('uploadprogress', function(file, progress) {
                        // Log the progress
                        console.log('Upload progress: ', progress);
                    });
                }
            }

            // Initialize tagsInput
            $('#tags').tagsInput({
                'height':'3.2rem',
                'width':'100%',
                'interactive':true,
                'defaultText':'Add a tag',
                //'delimiter': [',',';'],   // Or a string with a single delimiter. Ex: ';'
                'removeWithBackspace' : true,
                'minChars' : 0,
                //'maxChars' : 0, // if not provided there is no limit
                'placeholderColor' : '#666666'
            });

            // Function that returns an array containing all tags
            let tagsInputValues = () => tagsInput.value.split(',');

            // Function that returns all topics as an array of topic objects
            let getTopics = () => {
                // Initialize the array
                let topicsArray = [];
                // Iterate over an array containing tags-input values
                for (let i = 0; i < tagsInputValues().length; i++) {
                    // Create an object named topic containing:
                    const topic = {
                        // A message property that stores the value at index i
                        message: tagsInputValues()[i],
                        // Add a color to the topic
                        // To be used later on the news page
                        color: colors[Math.floor(Math.random() * colors.length)],
                        // Add an id to the topic
                        // Helps to add listeners
                        dynamicId: topicsIds[i],
                        // Add a url to be added to the DOM
                        url: `/topic?id=${tagsInputValues()[i]}`
                    }

                    // Add the topic the array
                    topicsArray = [ ...topicsArray, topic];
                }

                // Log the array
                console.log('All topics: ', topicsArray);
                // Return the array
                return topicsArray;
            }

            // Add click event listener to the save button
            saveBtn.addEventListener('click', function(evt) {
                // Call savePost()
                savePost();
            });

            // Function to save the post
            let savePost = (isDraft = true, isPublished = false) => {
                socket.emit('posts::create', {
                    title: titleInput.value,
                    titlePic: titlePhoto,
                    body: bodyInput.value,
                    author: window.localStorage.getItem('sobanuka-account-id'),
                    topics: getTopics(),
                    createdOn: {
                        year: new Date().getFullYear(),
                        month: new Date().getMonth(),
                        date: new Date().getDate(),
                        hour: new Date().getHours(),
                        minutes: new Date().getMinutes(),
                        seconds: new Date().getSeconds(),
                        milliseconds: new Date().getMilliseconds()
                    },
                    comments: [],
                    updated: false,
                    draft: isDraft,
                    isPublished: isPublished,
                    views: 0,
                    likes: 0,
                    shares: 0,
                    url: encodeURI(`/article?${titleInput.value}`),
                    allPics: uploadedFileIds,
                    updatedOn : {}
                }, (error, message) => {
                    console.log('Post added: ', message);
                });
            }
        </script>
    </body>
</html>